# -*- coding: utf-8 -*-
"""Car Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bnF0W4_sqjEV4TcQeUYtYJoAn4hBefCp
"""

import pandas as pd
# import numpy as np
import matplotlib.pyplot as plt
# import seaborn as sns
#pd.set_option('display.max_columns', None)

"""**Read CSV file**"""

df = pd.read_csv('/content/drive/MyDrive/Sample CSV/data.csv')

"""**Check count of nulls in every column**"""

df.isna().sum()

"""**Replace the nulls with 0 as the columns are of integer or float datatype. Insert into a new Dataframe**"""

#df_replace_null = df.fillna({'mileage_fuel_tank_capacity': 0.0, 'mileage_combined_mpg': 0.0, 'mileage_epa_city_mpg': 0.0, 'mileage_epa_highway_mpg': 0.0, 'mileage_range_city': 0.0, 'mileage_range_highway': 0.0, 'engine_size': 0.0, 'engine_horsepower_hp': 0.0, 'engine_horsepower_rpm': 0.0, 'engine_torque_ft_lbs': 0.0, 'engine_torque_rpm': 0.0, 'engine_valves': 0, 'body_doors': 0, 'body_length': 0.0, 'body_width': 0.0, 'body_seats': 0, 'body_height': 0.0, 'body_wheel_base':0.0 })

"""**Modify the created and modified column datatype from Object to datetime**"""

df['created'] = pd.to_datetime(df['created'])
df['modified'] = pd.to_datetime(df['modified'])
df.info()

"""**Display the Maximum MSRP of the cars which have Horsepower more than 7000 for all the years using pandas plot bar**"""

plt.style.use('ggplot')

df[df['engine_horsepower_rpm'] > 7000] \
      .groupby('make_name')['msrp'] \
      .max() \
      .sort_values(ascending = True) \
      .plot(kind='bar', figsize=(10, 6), color='skyblue').set_title('Maximum MSRP for Cars with HP Greater than 7000')

"""**Display the count of the cars which have Horsepower more than 4000 for all the years using pandas plot bar**"""

df[df['engine_horsepower_rpm'] < 4000] \
      .groupby('make_name')['make_id']\
      .count() \
      .sort_values(ascending = True) \
      .plot(kind='bar', figsize=(5, 5), color='yellowgreen').set_title('Count of cars with HP less tha 4000')

"""**Create a new Dataframe with average msrp of all the makes for the year 2024 and Display Bar chart using Matplotlib**"""

msrp_avg_2024 = df[df['year'] == 2024].groupby('make_name')['msrp'].mean().sort_values(ascending=True).reset_index()

plt.figure(figsize=(12,10))
plt.bar(msrp_avg_2024['make_name'], msrp_avg_2024['msrp'], color='salmon')
plt.xlabel('Average MSRP')
plt.ylabel('Make Name')
plt.title('Average MSRP by Make Name')
plt.xticks(rotation=90)
plt.show()

"""**Display a pie chart to show the number of door types for all the cars**"""

plt.pie(df['body_doors'].value_counts(), labels = df['body_doors'].unique(), autopct = '%1.1f%%', explode=[0.0, 0.0, 0.0, 0.2])
plt.title('Body Doors')
plt.show()

"""**Calculate Summanry Statistics of the Data**"""

df.groupby('make_name')['msrp'].agg(
    avg_msrp='mean',
    median_msrp='median',
    stddev_msrp='std',
    min_msrp='min',
    max_msrp='max'
).sort_values(by='avg_msrp', ascending=False)

df.columns

"""**Display Histogram of Combined MPG**"""

plt.hist(df['mileage_combined_mpg'], bins=20, edgecolor='black', color='darkgreen')
plt.xlabel('Mileage')
plt.ylabel('Frequency')
plt.title('Mileage Distribution')
plt.show()

"""**Calcluate Depreciation by differentiating the MSRP with invoice for different years adn display line chart as subplots for year 2023 & 2024**

***Depreciation meaning : a decrease in the value of a asset over time***
"""

df2 = df[((df['invoice'] != 0) & (df['msrp'] != 0))]
df2['depreciation'] =   df2['msrp'] - df2['invoice']
depreciation_df_1 = df2[df2['year'] == 2023].groupby('make_name')['depreciation'].mean().sort_values(ascending=True)
depreciation_df_2 = df2[df2['year'] == 2024].groupby('make_name')['depreciation'].mean().sort_values(ascending=True)

plt.figure(figsize=(15,5))
plt.subplot(1, 2, 1)
plt.plot(depreciation_df_1.index, depreciation_df_1.values, color='purple', marker='.', linewidth=2)
plt.xlabel('Make Name')
plt.ylabel('Average Depreciation')
plt.title('Average Depreciation for year 2023')
plt.xticks(rotation=90)

plt.subplot(1, 2, 2)
plt.plot(depreciation_df_2.index, depreciation_df_2.values, color='green', marker='.', linewidth=2)
plt.xlabel('Make Name')
plt.title('Average Depreciation for year 2024')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""**Calculate total invoice for year 2023 & 2024 and display using bar chart**"""

total_invoice_2023 = df2[df2['year'] == 2023].groupby('make_name')['invoice'].sum().sort_values(ascending=True).reset_index()
total_invoice_2024 = df2[df2['year'] == 2024].groupby('make_name')['invoice'].sum().sort_values(ascending=True).reset_index()

plt.figure(figsize=(15,5))
plt.subplot(1, 2, 1)
plt.bar(total_invoice_2023['make_name'], total_invoice_2023['invoice'], color='dimgrey')
plt.xlabel('Make Name')
plt.ylabel('Total Invoice')
plt.title('Total Invoice for 2023')
plt.xticks(rotation=90)

plt.subplot(1, 2, 2)
plt.bar(total_invoice_2024['make_name'], total_invoice_2024['invoice'], color='r')
plt.xlabel('Make Name')
plt.title('Total Invoice for 2024')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""**Displat total cars per month from the dataset**"""

df['MonthYear'] = df['created'].dt.strftime('%Y-%m')

total_cars_per_month = df.groupby('MonthYear')['msrp'].count().sort_values(ascending=True)
plt.bar(total_cars_per_month.index, total_cars_per_month.values, color='orange')
plt.xlabel('Month')
plt.ylabel('Total Cars')
plt.title('Total Cars per Month')
plt.xticks(rotation=45)
plt.show()

df.columns

df.groupby(['year', 'MonthYear']).size().plot(figsize=(10,5))

